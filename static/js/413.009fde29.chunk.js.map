{"version":3,"file":"static/js/413.009fde29.chunk.js","mappings":"4IAWA,IARyB,SAAHA,GAAmB,IAAbC,EAAKD,EAALC,MAC1B,OAAQC,EAAAA,EAAAA,MAAA,KAAAC,SAAA,CAAG,WAASF,EAAM,QAC5B,C,iHC0CA,UArCc,WACZ,IAAQG,GAAWC,EAAAA,EAAAA,MAAXD,OACFE,GAAWC,EAAAA,EAAAA,MACjBC,GAAiCC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAK,IAAzDA,EAAKH,EAALG,MAAOC,EAAMJ,EAANI,OAAQC,EAAKL,EAALK,MAQvB,OANAC,EAAAA,EAAAA,YAAU,WACJV,GAA2B,IAAjBO,EAAMI,QAClBT,GAASU,EAAAA,EAAAA,GAAWZ,GAExB,GAAG,CAACE,EAAUF,EAAQO,KAGpBM,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CAACC,UAAU,eAAchB,UAC7BD,EAAAA,EAAAA,MAAA,OAAKiB,UAAU,UAAShB,SAAA,EACtBc,EAAAA,EAAAA,KAAA,MAAIE,UAAU,mBAAkBhB,SAAC,8BAErB,YAAXS,IAAwBK,EAAAA,EAAAA,KAACG,EAAAA,EAAgB,CAACnB,MAAM,UAErC,WAAXW,IAAuBK,EAAAA,EAAAA,KAAA,KAAAd,SAAIU,IAEhB,YAAXD,IACCK,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CAACC,GAAG,KAAKC,UAAQ,EAAApB,SACxBQ,IAAc,OAALA,QAAK,IAALA,OAAK,EAALA,EAAOI,QAAS,GAAKJ,EAAMa,KAAI,SAAAC,GAAI,OAC3CR,EAAAA,EAAAA,KAACI,EAAAA,EAAUK,KAAI,CAAeJ,GAAG,KAAKH,UAAU,SAAQhB,UACtDD,EAAAA,EAAAA,MAAA,OAAKiB,UAAU,OAAMhB,SAAA,EACnBc,EAAAA,EAAAA,KAAA,MAAAd,SAAA,GAAAwB,OAAQF,EAAKG,MAAMC,MAAM,EAAG,GAAGC,eAAaH,OAAGF,EAAKG,MAAMC,MAAM,OAChEZ,EAAAA,EAAAA,KAAA,KAAAd,SAAA,GAAAwB,OAAOF,EAAKM,KAAKF,MAAM,EAAG,GAAGC,eAAaH,OAAGF,EAAKM,KAAKF,MAAM,UAH5CJ,EAAKO,GAKT,UAO/B,C","sources":["components/LoadingComponent.js","data-containers/Posts.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst LoadingComponent = ({ items }) => {\n  return (<p>Loading {items}...</p>)\n};\n\nLoadingComponent.propTypes = {\n  items: PropTypes.array,\n};\n\nexport default LoadingComponent;\n","import React, { useEffect } from 'react';\nimport { useParams } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { fetchPosts } from \"../redux/reducers/posts\";\n\nimport Stack from 'react-bootstrap/Stack';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport LoadingComponent from '../components/LoadingComponent';\n\nconst Posts = () => {\n  const { userId } = useParams();\n  const dispatch = useDispatch();\n  const { posts, status, error } = useSelector(state => state.posts);\n\n  useEffect(() => {\n    if (userId && posts.length === 0) {\n      dispatch(fetchPosts(userId));\n    }\n  }, [dispatch, userId, posts]);\n\n  return (\n    <Stack className=\"container-sm\">\n      <div className=\"mx-auto\">\n        <h2 className='py-4 text-center'>Posts of the chosen user:</h2>\n\n        {status === 'loading' && <LoadingComponent items=\"posts\" />}\n\n        {status === 'failed' && <p>{error}</p>}\n\n        {status === 'success' && (\n          <ListGroup as=\"ol\" numbered>\n            {posts && posts?.length > 0 && posts.map(post => (\n              <ListGroup.Item key={post.id} as=\"li\" className='d-flex'>\n                <div className='px-2'>\n                  <h5>{`${post.title.slice(0, 1).toUpperCase()}${post.title.slice(1)}`}</h5>\n                  <p>{`${post.body.slice(0, 1).toUpperCase()}${post.body.slice(1)}`}</p>\n                </div>\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        )}\n      </div>\n    </Stack >\n  );\n};\n\nexport default Posts;\n"],"names":["_ref","items","_jsxs","children","userId","useParams","dispatch","useDispatch","_useSelector","useSelector","state","posts","status","error","useEffect","length","fetchPosts","_jsx","Stack","className","LoadingComponent","ListGroup","as","numbered","map","post","Item","concat","title","slice","toUpperCase","body","id"],"sourceRoot":""}